            Mutex
Let’s say there is an administrator whose name in Mutex. Mr. Mutex has defined his 
own rules to maintain the order. Let’s see how he is maintaining the order: 

    1.He has a key to the bathroom. He gives the key to the person who is standing first in the row. 
    As soon as the person/thread gets the key, he basically owns the mutex or the key.
    
    2.The person/thread uses the bathroom/resources and then gives the key back/releases the mutex to the administrator.
   
    3.The administrator gives this key again to the first person in the queue.
    
    4. The Mutex is not so smart and has a very bad memory. So he keeps a register with him and 
    always writes whether or not the key is with him. If he decided to give the key to person he 
    marks false in the register and then gives it to the first person waiting in the queue.
    The marking of false can be seen as the signal to the person that key is available for grab. 
    When the key is with him, he marks TRUE in register . 
    
    myMutex
    {
    
      myMutex()
      {
      }
      
      CreateMutex()
      {
      //security attributes
      }
      
      GetLastError()
      {
      }
      
      LockMutex()
      {
      }
      waitforsignal()
      {
      }
      
      unlockmutex()
      {
      }
      
      releasemutex()
      {
      }
      
      closemutex()
     {
      }
      
      
      };
